[{"title":"SpringBoot整合Mybatis详细流程","date":"2022-01-04T10:38:05.000Z","path":"2022/01/04/SpringBoot整合Mybatis详细流程/","text":"基础环境准备1、数据库准备使用MySQL，创建数据库spring-boot-mybatis，然后在该数据库中创建两个表course和comment，并向表中插入一些基础数据。 12345678910111213141516171819202122232425262728293031323334353637# 创建数据库CREATE DATABASE spring-boot-mybatis; USE spring-boot-mybatis;# 创建表courseDROP TABLE IF EXISTS course; CREATE TABLE course (id int(20) NOT NULL AUTO_INCREMENT COMMENT &#x27;课程id&#x27;, title varchar(200) DEFAULT NULL COMMENT &#x27;课程标题&#x27;,content longtext COMMENT &#x27;课程内容&#x27;,PRIMARY KEY (id)) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;INSERT INTO course VALUES (&#x27;1&#x27;, &#x27;Spring Boot基础入门&#x27;, &#x27;从入门到精通讲解...&#x27;); INSERT INTO t_article VALUES (&#x27;2&#x27;, &#x27;Spring Cloud基础入门&#x27;, &#x27;从入门到精通讲解...&#x27;);# 创建表commentDROP TABLE IF EXISTS comment; CREATE TABLE comment (id int(20) NOT NULL AUTO_INCREMENT COMMENT &#x27;评论id&#x27;, content longtext COMMENT &#x27;评论内容&#x27;,author varchar(200) DEFAULT NULL COMMENT &#x27;评论作者&#x27;, c_id int(20) DEFAULT NULL COMMENT &#x27;关联的课程id&#x27;, PRIMARY KEY (id)) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;INSERT INTO t_comment VALUES (&#x27;1&#x27;, &#x27;很全、很详细&#x27;, &#x27;lucy&#x27;, &#x27;1&#x27;); INSERT INTO t_comment VALUES (&#x27;2&#x27;, &#x27;赞一个&#x27;, &#x27;tom&#x27;, &#x27;1&#x27;);INSERT INTO t_comment VALUES (&#x27;3&#x27;, &#x27;很详细&#x27;, &#x27;eric&#x27;, &#x27;1&#x27;); INSERT INTO t_comment VALUES (&#x27;4&#x27;, &#x27;很好，非常详细&#x27;, &#x27;张三&#x27;, &#x27;1&#x27;); INSERT INTO t_comment VALUES (&#x27;5&#x27;, &#x27;很不错&#x27;, &#x27;李四&#x27;, &#x27;2&#x27;); 2、创建对应的SpringBoot项目此处省略 3、编写与数据库对应的实体类(set和get方法省略）123456789101112public class Comment &#123; private Integer id; private String content; private String author; private Integer aId;&#125;public class Course &#123; private Integer id; private String title; private String content;&#125; 4、编写SpringBoot的配置文件123456# MySQL数据库连接配置 spring: datasource: url: jdbc:mysql://localhost:3306/springbootmybatis?serverTimezone=UTC&amp;characterEncoding=UTF-8 username: root password: rootroot 配置文件整合Mybatis创建course数据库对应的操作接口CourseMapper123public interface CourseMapper &#123; public Article selectCourse(Integer id);&#125; 创建Mapper对应的XML映射文件resources目录下创建一个统一管理映射文件的包mapper，并在该包下编写与CourseMapper接口方应的映射文件CourseMapper.xml 12345678&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt; &lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;&lt;mapper namespace=&quot;com.springboot.mapper.CourseMapper&quot;&gt; &lt;select id=&quot;selectCourse&quot; resultType=&quot;Course&quot;&gt; select * from course &lt;/select&gt;&lt;/mapper&gt; 配置XML映射文件路径在项目中编写的XML映射文件，SpringBoot并不知道，所以无法扫描到自定义编写的XML配置文 件，还必须在全局配置文件application.yml中添加MyBatis映射文件路径的配置，同时需要添加 实体类别名映射路径，示例代码如下 12345mybatis: #配置MyBatis的xml配置文件路径 mapper-locations: classpath:mapper/*.xml #配置XML映射文件中指定的实体类别名路径 type-aliases-package: com.mybatis.entity 编写单元测试进行接口方法测试12345678@Autowiredprivate CourseMapper courseMapper;@Testvoid springBootAndMybatisTest() &#123; Course course = courseMapper.selectCourse(1); System.out.println(course);&#125; 至此SpringBoot整合Mybatis流程已经完成。","tags":[]},{"title":"hutool工具类","date":"2021-12-27T10:06:40.000Z","path":"2021/12/27/hutool工具类/","text":"安装Hutool的安装非常简单，Maven项目中只需在pom.xml添加以下依赖即可。 12345&lt;dependency&gt; &lt;groupId&gt;cn.hutool&lt;/groupId&gt; &lt;artifactId&gt;hutool-all&lt;/artifactId&gt; &lt;version&gt;5.4.0&lt;/version&gt;&lt;/dependency&gt; 常用工具类 使用一个工具方法代替一段复杂代码，避免复制粘贴代码，可以极大的提高我们的开发效率 Convert类型转换工具类，用于各种类型数据的转换。平时我们转换类型经常会面临类型转换失败的问题，要写try catch代码，有了它，就不用写了！ 123456789101112//转换为字符串int a = 1;String aStr = Convert.toStr(a);//转换为指定类型数组String[] b = &#123;&quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot;&#125;;Integer[] bArr = Convert.toIntArray(b);//转换为日期对象String dateStr = &quot;2017-05-06&quot;;Date date = Convert.toDate(dateStr);//转换为列表String[] strArr = &#123;&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;&#125;;List&lt;String&gt; strList = Convert.toList(String.class, strArr); DateUtil日期时间工具类，定义了一些常用的日期时间操作方法。JDK自带的Date和Calendar对象真心不好用，有了它操作日期时间就简单多了！ 12345678910111213141516171819202122232425//Date、long、Calendar之间的相互转换//当前时间Date date = DateUtil.date();//Calendar转Datedate = DateUtil.date(Calendar.getInstance());//时间戳转Datedate = DateUtil.date(System.currentTimeMillis());//自动识别格式转换String dateStr = &quot;2017-03-01&quot;;date = DateUtil.parse(dateStr);//自定义格式化转换date = DateUtil.parse(dateStr, &quot;yyyy-MM-dd&quot;);//格式化输出日期String format = DateUtil.format(date, &quot;yyyy-MM-dd&quot;);//获得年的部分int year = DateUtil.year(date);//获得月份，从0开始计数int month = DateUtil.month(date);//获取某天的开始、结束时间Date beginOfDay = DateUtil.beginOfDay(date);Date endOfDay = DateUtil.endOfDay(date);//计算偏移后的日期时间Date newDate = DateUtil.offset(date, DateField.DAY_OF_MONTH, 2);//计算日期时间之间的偏移量long betweenDay = DateUtil.between(date, newDate, DateUnit.DAY); JSONUtilJSON解析工具类，可用于对象与JSON之间的互相转化。 12345678910111213141516PmsBrand brand = new PmsBrand();brand.setId(1L);brand.setName(&quot;小米&quot;);brand.setShowStatus(1);//对象转化为JSON字符串String jsonStr = JSONUtil.parse(brand).toString();LOGGER.info(&quot;jsonUtil parse:&#123;&#125;&quot;, jsonStr);//JSON字符串转化为对象PmsBrand brandBean = JSONUtil.toBean(jsonStr, PmsBrand.class);LOGGER.info(&quot;jsonUtil toBean:&#123;&#125;&quot;, brandBean);List&lt;PmsBrand&gt; brandList = new ArrayList&lt;&gt;();brandList.add(brand);String jsonListStr = JSONUtil.parse(brandList).toString();//JSON字符串转化为列表brandList = JSONUtil.toList(new JSONArray(jsonListStr), PmsBrand.class);LOGGER.info(&quot;jsonUtil toList:&#123;&#125;&quot;, brandList); StrUtil字符串工具类，定义了一些常用的字符串操作方法。StrUtil比StringUtil名称更短，用起来也更方便！ 1234567891011//判断是否为空字符串String str = &quot;test&quot;;StrUtil.isEmpty(str);StrUtil.isNotEmpty(str);//去除字符串的前后缀StrUtil.removeSuffix(&quot;a.jpg&quot;, &quot;.jpg&quot;);StrUtil.removePrefix(&quot;a.jpg&quot;, &quot;a.&quot;);//格式化字符串String template = &quot;这只是个占位符:&#123;&#125;&quot;;String str2 = StrUtil.format(template, &quot;我是占位符&quot;);LOGGER.info(&quot;/strUtil format:&#123;&#125;&quot;, str2); ClassPathResourceClassPath单一资源访问类，可以获取classPath下的文件，在Tomcat等容器下，classPath一般是WEB-INF/classes。 12345//获取定义在src/main/resources文件夹中的配置文件ClassPathResource resource = new ClassPathResource(&quot;generator.properties&quot;);Properties properties = new Properties();properties.load(resource.getStream());LOGGER.info(&quot;/classPath:&#123;&#125;&quot;, properties); ReflectUtilJava反射工具类，可用于反射获取类的方法及创建对象。 12345678//获取某个类的所有方法Method[] methods = ReflectUtil.getMethods(PmsBrand.class);//获取某个类的指定方法Method method = ReflectUtil.getMethod(PmsBrand.class, &quot;getId&quot;);//使用反射来创建对象PmsBrand pmsBrand = ReflectUtil.newInstance(PmsBrand.class);//反射执行对象的方法ReflectUtil.invoke(pmsBrand, &quot;setId&quot;, 1); NumberUtil数字处理工具类，可用于各种类型数字的加减乘除操作及类型判断。 123456789101112131415double n1 = 1.234;double n2 = 1.234;double result;//对float、double、BigDecimal做加减乘除操作result = NumberUtil.add(n1, n2);result = NumberUtil.sub(n1, n2);result = NumberUtil.mul(n1, n2);result = NumberUtil.div(n1, n2);//保留两位小数BigDecimal roundNum = NumberUtil.round(n1, 2);String n3 = &quot;1.234&quot;;//判断是否为数字、整数、浮点数NumberUtil.isNumber(n3);NumberUtil.isInteger(n3);NumberUtil.isDouble(n3); BeanUtilJavaBean工具类，可用于Map与JavaBean对象的互相转换以及对象属性的拷贝。 1234567891011121314PmsBrand brand = new PmsBrand();brand.setId(1L);brand.setName(&quot;小米&quot;);brand.setShowStatus(0);//Bean转MapMap&lt;String, Object&gt; map = BeanUtil.beanToMap(brand);LOGGER.info(&quot;beanUtil bean to map:&#123;&#125;&quot;, map);//Map转BeanPmsBrand mapBrand = BeanUtil.mapToBean(map, PmsBrand.class, false);LOGGER.info(&quot;beanUtil map to bean:&#123;&#125;&quot;, mapBrand);//Bean属性拷贝PmsBrand copyBrand = new PmsBrand();BeanUtil.copyProperties(brand, copyBrand);LOGGER.info(&quot;beanUtil copy properties:&#123;&#125;&quot;, copyBrand); CollUtil集合操作的工具类，定义了一些常用的集合操作。 123456789101112131415//数组转换为列表String[] array = new String[]&#123;&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;e&quot;&#125;;List&lt;String&gt; list = CollUtil.newArrayList(array);//join：数组转字符串时添加连接符号String joinStr = CollUtil.join(list, &quot;,&quot;);LOGGER.info(&quot;collUtil join:&#123;&#125;&quot;, joinStr);//将以连接符号分隔的字符串再转换为列表List&lt;String&gt; splitList = StrUtil.split(joinStr, &#x27;,&#x27;);LOGGER.info(&quot;collUtil split:&#123;&#125;&quot;, splitList);//创建新的Map、Set、ListHashMap&lt;Object, Object&gt; newMap = CollUtil.newHashMap();HashSet&lt;Object&gt; newHashSet = CollUtil.newHashSet();ArrayList&lt;Object&gt; newList = CollUtil.newArrayList();//判断列表是否为空CollUtil.isEmpty(list); MapUtilMap操作工具类，可用于创建Map对象及判断Map是否为空。 123456789//将多个键值对加入到Map中Map&lt;Object, Object&gt; map = MapUtil.of(new String[][]&#123; &#123;&quot;key1&quot;, &quot;value1&quot;&#125;, &#123;&quot;key2&quot;, &quot;value2&quot;&#125;, &#123;&quot;key3&quot;, &quot;value3&quot;&#125;&#125;);//判断Map是否为空MapUtil.isEmpty(map);MapUtil.isNotEmpty(map); AnnotationUtil注解工具类，可用于获取注解与注解中指定的值。 123456789//获取指定类、方法、字段、构造器上的注解列表Annotation[] annotationList = AnnotationUtil.getAnnotations(HutoolController.class, false);LOGGER.info(&quot;annotationUtil annotations:&#123;&#125;&quot;, annotationList);//获取指定类型注解Api api = AnnotationUtil.getAnnotation(HutoolController.class, Api.class);LOGGER.info(&quot;annotationUtil api value:&#123;&#125;&quot;, api.description());//获取指定类型注解的值Object annotationValue = AnnotationUtil.getAnnotationValue(HutoolController.class, RequestMapping.class);复制代码 SecureUtil加密解密工具类，可用于MD5加密。 12345//MD5加密String str = &quot;123456&quot;;String md5Str = SecureUtil.md5(str);LOGGER.info(&quot;secureUtil md5:&#123;&#125;&quot;, md5Str);复制代码 CaptchaUtil验证码工具类，可用于生成图形验证码。 12345678910111213//生成验证码图片LineCaptcha lineCaptcha = CaptchaUtil.createLineCaptcha(200, 100);try &#123; request.getSession().setAttribute(&quot;CAPTCHA_KEY&quot;, lineCaptcha.getCode()); response.setContentType(&quot;image/png&quot;);//告诉浏览器输出内容为图片 response.setHeader(&quot;Pragma&quot;, &quot;No-cache&quot;);//禁止浏览器缓存 response.setHeader(&quot;Cache-Control&quot;, &quot;no-cache&quot;); response.setDateHeader(&quot;Expire&quot;, 0); lineCaptcha.write(response.getOutputStream());&#125; catch (IOException e) &#123; e.printStackTrace();&#125;复制代码 Validator字段验证器，可以对不同格式的字符串进行验证，比如邮箱、手机号、IP等格式。 12345678910111213141516171819202122//判断是否为邮箱地址boolean result = Validator.isEmail(&quot;macro@qq.com&quot;);LOGGER.info(&quot;Validator isEmail:&#123;&#125;&quot;, result);//判断是否为手机号码result = Validator.isMobile(&quot;18911111111&quot;);LOGGER.info(&quot;Validator isMobile:&#123;&#125;&quot;, result);//判断是否为IPV4地址result = Validator.isIpv4(&quot;192.168.3.101&quot;);LOGGER.info(&quot;Validator isIpv4:&#123;&#125;&quot;, result);//判断是否为汉字result = Validator.isChinese(&quot;你好&quot;);LOGGER.info(&quot;Validator isChinese:&#123;&#125;&quot;, result);//判断是否为身份证号码（18位中国）result = Validator.isCitizenId(&quot;123456&quot;);LOGGER.info(&quot;Validator isCitizenId:&#123;&#125;&quot;, result);//判断是否为URLresult = Validator.isUrl(&quot;http://www.baidu.com&quot;);LOGGER.info(&quot;Validator isUrl:&#123;&#125;&quot;, result);//判断是否为生日result = Validator.isBirthday(&quot;2020-02-01&quot;);LOGGER.info(&quot;Validator isBirthday:&#123;&#125;&quot;, result);复制代码 DigestUtil摘要算法工具类，支持MD5、SHA-256、Bcrypt等算法。 123456789101112String password = &quot;123456&quot;;//计算MD5摘要值，并转为16进制字符串String result = DigestUtil.md5Hex(password);LOGGER.info(&quot;DigestUtil md5Hex:&#123;&#125;&quot;, result);//计算SHA-256摘要值，并转为16进制字符串result = DigestUtil.sha256Hex(password);LOGGER.info(&quot;DigestUtil sha256Hex:&#123;&#125;&quot;, result);//生成Bcrypt加密后的密文，并校验String hashPwd = DigestUtil.bcrypt(password);boolean check = DigestUtil.bcryptCheck(password,hashPwd);LOGGER.info(&quot;DigestUtil bcryptCheck:&#123;&#125;&quot;, check);复制代码 HttpUtilHttp请求工具类，可以发起GET/POST等请求。 12String response = HttpUtil.get(&quot;http://localhost:8080/hutool/covert&quot;);LOGGER.info(&quot;HttpUtil get:&#123;&#125;&quot;, response); hutool官网www.hutool.cn/","tags":[]},{"title":"Hello World","date":"2021-12-17T06:49:33.859Z","path":"2021/12/17/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]